/****************************************
 * Name: Corey Bivens
 * Assignment: Final Project  
 * Date: 5/9/23
 ****************************************/

//library inclusions
#include <DHT.h>
#include <Adafruit_Sensor.h>
#include <Stepper.h>
#include <uRTCLib.h>
#include <Servo.h>
#include <LiquidCrystal.h>
#include <RTClib.h>

//LED pins (need pin numbers)
#define yellow 12
#define green 9
#define red 13 
#define blue 11

//dht pin and declaration (need pin number)
#define DHTTYPE DHT11
#define DHTPIN 5
DHT dht(DHTPIN, DHTTYPE);

//RDA/TDE
#define RDA 0x80
#define TBE 0x20 

//UARt pointers
volatile unsigned char *myUCSR0A  =(unsigned char *)0x00C0;
volatile unsigned char *myUCSR0B  =(unsigned char *)0x00C1;
volatile unsigned char *myUCSR0C  =(unsigned char *)0x00C2;
volatile unsigned int  *myUBRR0   =(unsigned int *)0x00C6;
volatile unsigned char *myUDR0    =(unsigned char *)0x00C4;

//ADC registers
volatile unsigned char* my_ADMUX = (unsigned char*) 0x7C;
volatile unsigned char* my_ADCSRB = (unsigned char*) 0x7B;
volatile unsigned char* my_ADCSRA = (unsigned char*) 0x7A;
volatile unsigned int* my_ADC_DATA = (unsigned int*) 0x78;

//lcd initalize 
LiquidCrystal lcd(52, 50, 32, 48, 46, 44, 42, 40, 38, 36, 37);




void setup() {
  U0Init(9600);
  adc_init();


  lcd.begin(16,2); //start LCD w 16 columns and 2 rows
}

void loop() {
  lcd.clear();
  lcd.write("anus");
}



/*
 * UART FUNCTIONS
 */
void U0Init(int U0baud)
{
 unsigned long FCPU = 16000000;
 unsigned int tbaud;
 tbaud = (FCPU / 16 / U0baud - 1);
 // Same as (FCPU / (16 * U0baud)) - 1;
 *myUCSR0A = 0x20;
 *myUCSR0B = 0x18;
 *myUCSR0C = 0x06;
 *myUBRR0  = tbaud;
}
unsigned char kbhit()
{
  return *myUCSR0A & RDA;
}
unsigned char getChar()
{
  return *myUDR0;
}
void putChar(unsigned char U0pdata)
{
  while((*myUCSR0A & TBE)==0);
  *myUDR0 = U0pdata;
}

/*
ADC functions
*/
void adc_init()
{
  // setup the A register
  *my_ADCSRA |= 0b10000000; // set bit   7 to 1 to enable the ADC
  *my_ADCSRA &= 0b11011111; // clear bit 6 to 0 to disable the ADC trigger mode
  *my_ADCSRA &= 0b11110111; // clear bit 5 to 0 to disable the ADC interrupt
  *my_ADCSRA &= 0b11111000; // clear bit 0-2 to 0 to set prescaler selection to slow reading
  // setup the B register
  *my_ADCSRB &= 0b11110111; // clear bit 3 to 0 to reset the channel and gain bits
  *my_ADCSRB &= 0b11111000; // clear bit 2-0 to 0 to set free running mode
  // setup the MUX Register
  *my_ADMUX  &= 0b01111111; // clear bit 7 to 0 for AVCC analog reference
  *my_ADMUX  |= 0b01000000; // set bit   6 to 1 for AVCC analog reference
  *my_ADMUX  &= 0b11011111; // clear bit 5 to 0 for right adjust result
  *my_ADMUX  &= 0b11100000; // clear bit 4-0 to 0 to reset the channel and gain bits
}

unsigned int adc_read(unsigned char adc_channel_num) //takes channel number as input
{
  int chan;

  // clear the channel selection bits (MUX 4:0)
  *my_ADMUX  &= 0b11100000;
  // clear the channel selection bits (MUX 5)
  *my_ADCSRB &= 0b11110111;
  // set the channel number
  if(adc_channel_num < 8)
  {
    *my_ADMUX |= adc_channel_num;
  } else if ((adc_channel_num > 7) && (adc_channel_num < 16)) {
    chan = (adc_channel_num - 8);
    *my_ADCSRB |= B00001000;
    *my_ADMUX |= chan;
  }
  // set the channel selection bits
  *my_ADMUX  += adc_channel_num;
  // set bit 6 of ADCSRA to 1 to start a conversion
  *my_ADCSRA |= 0x40;
  // wait for the conversion to complete
  while((*my_ADCSRA & 0x40) != 0);
  // return the result in the ADC data register
  return *my_ADC_DATA;
}



bool temp_hum_check (float *temperature, float *humidity){

}
